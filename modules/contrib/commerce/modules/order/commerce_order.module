<?php

/**
 * @file
 * Defines the Order entity and associated features.
 */

use Drupal\commerce_order\Entity\OrderInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_theme().
 */
function commerce_order_theme($existing, $type, $theme, $path) {
  return [
    'commerce_order' => [
      'render element' => 'elements',
    ],
    'commerce_order__user' => [
      'base hook' => 'commerce_order',
      'render element' => 'elements',
    ],
    'commerce_order_edit_form' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function commerce_order_commerce_order_presave(OrderInterface $order) {
  $place_transition = $order->getState()->getWorkflow()->getTransition('place');
  if (!$order->isNew() && empty($order->getPlacedTime()) && $place_transition) {
    $from_states = $place_transition->getFromStates();
    $from_state = reset($from_states);
    $from_state = $from_state->getId();
    $to_state = $place_transition->getToState()->getId();
    if ($order->original->state->value == $from_state && $order->state->value == $to_state) {
      $order->setPlacedTime(REQUEST_TIME);
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * - Changes the label of the purchased_entity field to the label of the
 *   target type (e.g. 'Product variation').
 * - Forbids editing the purchased_entity once the line item is no longer new.
 */
function commerce_order_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();
  $field_name = $field_definition->getName();
  $entity_type = $field_definition->getTargetEntityTypeId();
  if ($field_name == 'purchased_entity' && $entity_type == 'commerce_line_item') {
    if (!empty($element['target_id']['#target_type'])) {
      $target_type = \Drupal::service('entity_type.manager')->getDefinition($element['target_id']['#target_type']);
      $element['target_id']['#title'] = $target_type->getLabel();
      if (!$context['items']->getEntity()->isNew()) {
        $element['#disabled'] = TRUE;
      }
    }
  }
}

/**
 * Prepares variables for order templates.
 *
 * Default template: commerce-order.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_order(&$variables) {
  /** @var Drupal\commerce_order\Entity\OrderInterface $order */
  $order = $variables['elements']['#commerce_order'];

  $variables['order'] = $order;
  // Helpful $content variable for templates.
  $variables['content'] = [];
  foreach (\Drupal\Core\Render\Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_theme_suggestions_commerce_order().
 */
function commerce_order_theme_suggestions_commerce_order(array $variables) {
  return _commerce_entity_theme_suggestions('commerce_order', $variables);
}

/**
 * Adds the default line_items field to an order type.
 *
 * Line items can't be a base field because the Views integration is broken.
 * Instead, it is created as a configurable field for each order type.
 *
 * @param \Drupal\commerce_order\Entity\OrderTypeInterface $order_type
 *   The order type.
 */
function commerce_order_add_line_items_field($order_type) {
  $field_storage = FieldStorageConfig::loadByName('commerce_order', 'line_items');
  $field = FieldConfig::loadByName('commerce_order', $order_type->id(), 'line_items');
  if (empty($field_storage)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'line_items',
      'entity_type' => 'commerce_order',
      'type' => 'entity_reference',
      'cardinality' => FieldStorageConfig::CARDINALITY_UNLIMITED,
      'settings' => [
        'target_type' => 'commerce_line_item',
      ],
      'locked' => TRUE,
      'translatable' => FALSE,
    ]);
    $field_storage->save();
  }
  if (empty($field)) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => $order_type->id(),
      'label' => 'Line items',
      'required' => TRUE,
      'settings' => [
        'handler' => 'default',
        'handler_settings' => [],
      ],
      'translatable' => FALSE,
    ]);
    $field->save();

    $view_display = commerce_get_entity_display('commerce_order', $order_type->id(), 'view');
    $view_display->setComponent('line_items', [
      'type' => 'commerce_line_item_table',
      'weight' => 0,
    ]);
    $view_display->save();

    $form_display = commerce_get_entity_display('commerce_order', $order_type->id(), 'form');
    $form_display->setComponent('line_items', [
      'type' => 'inline_entity_form_complex',
      'weight' => 0,
      'settings' => [
        'override_labels' => TRUE,
        'label_singular' => 'line item',
        'label_plural' => 'line items',
      ],
    ]);
    $form_display->save();
  }
}

/**
 * Implements hook_views_data_alter().
 */
function commerce_order_views_data_alter(array &$data) {
  $data['commerce_order']['store_id']['field']['id'] = 'commerce_store';
  $data['commerce_order']['state']['filter']['id'] = 'state_machine_state';
}
