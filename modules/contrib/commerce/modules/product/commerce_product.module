<?php

/**
 * @file
 * Defines the Product entity and associated features.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_create().
 */
function commerce_product_entity_bundle_create($entity_type_id, $bundle) {
  if ($entity_type_id == 'commerce_product' && !\Drupal::isConfigSyncing()) {
    // Clear the line item type map after a new product type has been created.
    \Drupal::service('commerce_product.line_item_type_map')->clearCache();
  }
}

/**
 * Implements hook_theme().
 */
function commerce_product_theme() {
  return [
    'commerce_product_form' => [
      'render element' => 'form',
    ],
    'commerce_product' => [
      'render element' => 'elements',
    ],
    'commerce_product_variation' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_commerce_product().
 */
function commerce_product_theme_suggestions_commerce_product(array $variables) {
  return _commerce_entity_theme_suggestions('commerce_product', $variables);
}

/**
 * Implements hook_theme_suggestions_commerce_product_variation().
 */
function commerce_product_theme_suggestions_commerce_product_variation(array $variables) {
  return _commerce_entity_theme_suggestions('commerce_product_variation', $variables);
}

/**
 * Prepares variables for product templates.
 *
 * Default template: commerce-product.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_product(array &$variables) {
  /** @var Drupal\commerce_product\Entity\ProductInterface $product */
  $product = $variables['elements']['#commerce_product'];

  $variables['product'] = $product;
  $variables['url'] = $product->toUrl();
  // Helpful $content variable for templates.
  $variables['content'] = [];
  foreach (\Drupal\Core\Render\Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for product variation templates.
 *
 * Default template: commerce-product-variation.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_product_variation(array &$variables) {
  /** @var Drupal\commerce_product\Entity\ProductVariationInterface $product_variation */
  $product_variation = $variables['elements']['#commerce_product_variation'];
  $product = $product_variation->getProduct();

  $variables['product'] = $product;
  $variables['product_variation'] = $product_variation;
  $variables['product_url'] = $product->toUrl();
  // Helpful $content variable for templates.
  $variables['content'] = [];
  foreach (\Drupal\Core\Render\Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Adds the default stores field to a product.
 *
 * A product can belong to multiple stores.
 * Store id can't be a base field because the Views integration is broken.
 * Instead, it is created as a configurable field for each order type.
 *
 * @param \Drupal\commerce_product\Entity\ProductTypeInterface $product_type
 *   The product type.
 */
function commerce_product_add_stores_field($product_type) {
  $field_storage = FieldStorageConfig::loadByName('commerce_product', 'stores');
  $field = FieldConfig::loadByName('commerce_product', $product_type->id(), 'stores');
  if (empty($field_storage)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'stores',
      'entity_type' => 'commerce_product',
      'type' => 'entity_reference',
      'cardinality' => FieldStorageConfig::CARDINALITY_UNLIMITED,
      'settings' => [
        'target_type' => 'commerce_store',
      ],
      'locked' => TRUE,
      'translatable' => FALSE,
    ]);
    $field_storage->save();
  }
  if (empty($field)) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => $product_type->id(),
      'label' => 'Stores',
      'required' => TRUE,
      'settings' => [
        'handler' => 'default',
        'handler_settings' => [],
      ],
      'translatable' => FALSE,
    ]);
    $field->save();

    $form_display = commerce_get_entity_display('commerce_product', $product_type->id(), 'form');
    $form_display->setComponent('stores', [
      'type' => 'commerce_entity_select',
      'weight' => -10,
    ]);
    $form_display->save();
  }
}

/**
 * Adds the default body field to a product type.
 *
 * @param \Drupal\commerce_product\Entity\ProductTypeInterface $product_type
 *   The product type.
 * @param string $label
 *   (optional) The label for the body instance. Defaults to 'Body'.
 */
function commerce_product_add_body_field($product_type, $label = 'Body') {
  $field_storage = FieldStorageConfig::loadByName('commerce_product', 'body');
  $field = FieldConfig::loadByName('commerce_product', $product_type->id(), 'body');
  if (empty($field_storage)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'body',
      'entity_type' => 'commerce_product',
      'type' => 'text_with_summary',
    ]);
    $field_storage->save();
  }
  if (empty($field)) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => $product_type->id(),
      'label' => $label,
      'settings' => ['display_summary' => FALSE],
    ]);
    $field->save();

    $view_display = commerce_get_entity_display('commerce_product', $product_type->id(), 'view');
    $view_display->setComponent('body', [
      'label' => 'hidden',
      'type' => 'text_default',
    ]);
    $view_display->save();

    $form_display = commerce_get_entity_display('commerce_product', $product_type->id(), 'form');
    $form_display->setComponent('body', [
      'type' => 'text_textarea_with_summary',
      'weight' => 1,
    ]);
    $form_display->save();
  }
}

/**
 * Adds the default variations field to a product type.
 *
 * Variations can't be a base field because the Views integration is broken.
 * Instead, it is created as a configurable field for each product type.
 *
 * @param \Drupal\commerce_product\Entity\ProductTypeInterface $product_type
 *   The product type.
 */
function commerce_product_add_variations_field($product_type) {
  $field_storage = FieldStorageConfig::loadByName('commerce_product', 'variations');
  $field = FieldConfig::loadByName('commerce_product', $product_type->id(), 'variations');
  if (empty($field_storage)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'variations',
      'entity_type' => 'commerce_product',
      'type' => 'entity_reference',
      'cardinality' => FieldStorageConfig::CARDINALITY_UNLIMITED,
      'settings' => [
        'target_type' => 'commerce_product_variation',
      ],
      'locked' => TRUE,
      'translatable' => FALSE,
    ]);
    $field_storage->save();
  }
  if (empty($field)) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => $product_type->id(),
      'label' => 'Variations',
      'required' => TRUE,
      'settings' => [
        'handler' => 'default',
        'handler_settings' => [
          'target_bundles' => [
            $product_type->getVariationTypeId(),
          ],
        ],
      ],
      'translatable' => FALSE,
    ]);
    $field->save();

    $view_display = commerce_get_entity_display('commerce_product', $product_type->id(), 'view');
    $view_display->setComponent('variations', [
      'type' => 'commerce_add_to_cart',
      'weight' => 10,
    ]);
    $view_display->save();

    $form_display = commerce_get_entity_display('commerce_product', $product_type->id(), 'form');
    $form_display->setComponent('variations', [
      'type' => 'inline_entity_form_complex',
      'weight' => 10,
      'settings' => [
        'override_labels' => TRUE,
        'label_singular' => 'variation',
        'label_plural' => 'variations',
      ],
    ]);
    $form_display->save();
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function commerce_product_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
  $field_definition = $context['items']->getFieldDefinition();
  $field_name = $field_definition->getName();
  $entity_type = $field_definition->getTargetEntityTypeId();
  $widget_name = $context['widget']->getPluginId();
  $required = $field_definition->isRequired();
  if ($field_name == 'path' && $entity_type == 'commerce_product' && $widget_name == 'path') {
    $element['alias']['#description'] = t('The alternative URL for this product. Use a relative path. For example, "/my-product".');
  }
  elseif ($field_name == 'title' && $entity_type == 'commerce_product_variation' && !$required) {
    // The title field is optional only when its value is automatically
    // generated, in which case the widget needs to be hidden.
    $element['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for 'field_ui_field_edit_form'.
 */
function commerce_product_form_field_config_edit_form_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Field\FieldConfigInterface $field */
  $field = $form_state->getFormObject()->getEntity();
  if ($field->getTargetEntityTypeId() != 'commerce_product_variation') {
    return;
  }

  if ($field->getType() == 'entity_reference' && $field->getFieldStorageDefinition()->getCardinality() == 1) {
    $attribute_field = $field->getThirdPartySetting('commerce_product', 'attribute_field', FALSE);
    $attribute_widget = $field->getThirdPartySetting('commerce_product', 'attribute_widget', 'select');
    $attribute_widget_title = $field->getThirdPartySetting('commerce_product', 'attribute_widget_title', NULL);

    $form['field']['commerce_product'] = [
      '#type' => 'fieldset',
      '#title' => t('Product variation attribute settings'),
      '#weight' => 5,
      '#collapsible' => FALSE,
    ];
    $form['field']['commerce_product']['attribute_field'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable this field to function as an attribute field on Add to Cart forms.'),
      '#default_value' => $attribute_field,
    ];
    $form['field']['commerce_product']['attribute_widget'] = [
      '#type' => 'radios',
      '#title' => t('Attribute selection widget'),
      '#description' => t('The type of element used to select an option if used on an Add to Cart form.'),
      '#options' => [
        'select' => t('Select list'),
        'radios' => t('Radio buttons'),
      ],
      '#states' => [
        'visible' => [
          ':input[name="attribute_field"]' => ['checked' => TRUE],
        ],
      ],
      '#default_value' => $attribute_widget,
    ];
    // Determine the default attribute widget title.
    $form['field']['commerce_product']['attribute_widget_title'] = [
      '#type' => 'textfield',
      '#title' => t('Attribute widget title'),
      '#description' => t('Specify the title to use for the attribute widget on the Add to Cart form.'),
      '#states' => [
        'visible' => [
          ':input[name="attribute_field"]' => ['checked' => TRUE],
        ],
      ],
      '#default_value' => $attribute_widget_title,
    ];
    $form['actions']['submit']['#submit'][] = 'commerce_product_form_field_config_edit_form_submit';
  }
}

/**
 * Submission handler for commerce_product_form_field_ui_field_edit_form_alter().
 */
function commerce_product_form_field_config_edit_form_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Field\FieldConfigInterface $field */
  $field = $form_state->getFormObject()->getEntity();
  $settings = &$form_state->getValues('field');
  // If the attribute field is checked, update the attribute fields.
  if ($settings['attribute_field']) {
    $field->setThirdPartySetting('commerce_product', 'attribute_widget_title', $settings['attribute_widget_title']);
    $field->setThirdPartySetting('commerce_product', 'attribute_widget', $settings['attribute_widget']);
    $field->setThirdPartySetting('commerce_product', 'attribute_field', TRUE);
    $field->save();
  }
  else {
    $field->unsetThirdPartySetting('commerce_product', 'attribute_widget_title');
    $field->unsetThirdPartySetting('commerce_product', 'attribute_widget');
    $field->unsetThirdPartySetting('commerce_product', 'attribute_field');
    $field->save();
  }
}
